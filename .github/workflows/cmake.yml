name: CMake Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:

  job:
    name: ${{ matrix.name }}-build-and-test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [ubuntu-latest-g++, macos-latest-clang++, windows-latest-cl.exe, ubuntu-latest-clang++]
        # For Windows msvc, for Linux and macOS let's use the clang compiler, use gcc for Linux.
        include:
          - name: windows-latest-cl.exe
            os: windows-latest
            cxx: cl.exe
            cc: cl.exe
          - name: ubuntu-latest-clang++
            os: ubuntu-latest
            cxx: clang++
            cc: clang
          - name: macos-latest-clang++
            os: macos-latest
            cxx: clang++
            cc: clang
          - name: ubuntu-latest-g++
            os: ubuntu-latest
            cxx: g++
            cc: gcc
    steps:
    - uses: actions/checkout@v2

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -VV -C ${{env.BUILD_TYPE}}
      
